{"version":3,"sources":["logo.svg","Components/Budget/BudgetOverview/BudgetOverview.js","Components/Category/CategoryWiseSplit/CategoryWiseSplit.js","Containers/Home/Home.js","Containers/Profile/Profile.js","Components/Category/CategoryName/CategoryName.js","Components/Category/CategoryList/CategoryList.js","Components/Category/Categories/Categories.js","Components/Budget/TotalBudget/TotalBudget.js","Containers/Settings/Settings.js","App.js","serviceWorker.js","reducers/addCategory.js","index.js"],"names":["module","exports","__webpack_require__","p","budgetOverview","props","react_default","a","createElement","className","categoryWiseSplit","Home","Container","Row","Col","BudgetOverview","CategoryWiseSplit","Component","Profile","connect","title","Button","variant","onClick","dispatch","type","id","console","log","CategoryList","this","category_names","map","item","Category_CategoryName_CategoryName","key","Categories","handleSubmit","e","preventDefault","_this","getName","value","data","Date","_this2","Form","onSubmit","Control","required","ref","input","placeholder","Category_CategoryList_CategoryList","TotalBudget","Settings","Budget_TotalBudget_TotalBudget","Category_Categories_Categories","state","App","react_router_dom","Nav","to","exact","activeClassName","react_router","path","component","Boolean","window","location","hostname","match","addCategory","arguments","length","undefined","action","concat","filter","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.327c55d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nconst budgetOverview = (props) => (\r\n        <div className=\"containerDiv\">\r\n            <div className=\"divHeading\">\r\n                <label className=\"heading\">BudgetOverview </label>\r\n            </div>\r\n            <div className=\"divContent\"></div>\r\n        </div>\r\n);\r\n\r\nexport default budgetOverview;","import React from 'react';\r\nimport { Container, Row } from 'react-bootstrap';\r\n\r\nconst categoryWiseSplit = (props) => (\r\n        <div className=\"containerDiv\">\r\n            <div className=\"divHeading\">\r\n                <label className=\"heading\">CategoryWiseSplit </label>\r\n            </div>\r\n            <div className=\"divContent\">\r\n                \r\n            </div>\r\n        </div>\r\n);\r\n\r\nexport default categoryWiseSplit;","import React, { Component } from 'react';\r\nimport BudgetOverview from '../../Components/Budget/BudgetOverview/BudgetOverview';\r\nimport CategoryWiseSplit from '../../Components/Category/CategoryWiseSplit/CategoryWiseSplit';\r\nimport Fragments from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\n\r\nclass Home extends Component{\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col className=\"colContainer\"><BudgetOverview/></Col>\r\n                    <Col className=\"colContainer\"><CategoryWiseSplit/></Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\n\r\nclass Profile extends Component{\r\n    render() {\r\n        return <h1> Profile Component</h1>\r\n    }\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport {connect } from 'react-redux';\r\n\r\nconst CategoryName = (props) =>  {\r\n    return  (\r\n        <div className=\"categoryName\">\r\n            <p>{props.title} <Button variant=\"danger\" onClick={()=> props.dispatch({type: 'DELETE', \r\nid: props.id})}> X </Button></p>\r\n        {console.log(props.title, props.id)}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default connect()(CategoryName);","import React, { Component} from 'react';\r\nimport CategoryName from '../CategoryName/CategoryName';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nclass CategoryList extends Component{\r\n    render(){\r\n        return(\r\n            <Container>\r\n                <div className=\"categoryList\">\r\n                    {this.props.category_names.map((item) => \r\n                        <CategoryName id = {item.id} key={item.id} title={item.title}/>\r\n                    )}\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\n// const CategoryList = (props) => {\r\n//     return (\r\n//          <div>\r\n//             {props.category_names.map((name) => \r\n//                 <CategoryName key = {name.id} name={name}/>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\nexport default CategoryList;","import React, { Component } from 'react';\r\nimport { Form, Row, Col, Button, Container } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport CategoryList from '../CategoryList/CategoryList';\r\n\r\nclass Categories extends Component{\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const title = this.getName.value;\r\n        const data = {\r\n          id: new Date(),\r\n          title,\r\n        }\r\n        this.props.dispatch({\r\n            type:'ADD',\r\n            data});\r\n          this.getName.value = '';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container className=\"form_container\">\r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <Row>\r\n                        <Col>\r\n                            <label className=\"label-text\">Categories</label>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control required type=\"text\" ref={(input)=>this.getName = input} \r\n                                        placeholder=\"Category Name\"/>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button variant =\"success\" type=\"submit\">Add</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n                <CategoryList category_names={this.props.category_names}/>\r\n                {console.log(this.props.category_names)}\r\n            </Container> \r\n        );\r\n    };\r\n}\r\n\r\nexport default connect()(Categories);","import React, { Component } from 'react';\r\nimport { Form, Row, Col, Button, Container } from 'react-bootstrap';\r\n\r\nclass TotalBudget extends Component{\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Form className=\"form_container\">\r\n                    <Row>\r\n                        <Col>\r\n                            <label className=\"label-text\">Total Budget</label>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control/>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button variant=\"success\"> Update</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TotalBudget;","import React, { Component } from 'react';\r\nimport { Form, Row, Col, Button, Container } from 'react-bootstrap';\r\nimport Categories from '../../Components/Category/Categories/Categories';\r\nimport TotalBudget from '../../Components/Budget/TotalBudget/TotalBudget';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Settings extends Component{\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <TotalBudget/>\r\n                <Categories category_names={this.props.category_names}/>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        category_names: state\r\n    }\r\n  };\r\n  \r\n//export default (App);\r\n\r\nexport default connect(mapStateToProps)(Settings);","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Home from './Containers/Home/Home';\r\nimport Profile from './Containers/Profile/Profile';\r\nimport Settings from './Containers/Settings/Settings';\r\nimport { Container, Nav } from 'react-bootstrap';\r\nimport { BrowserRouter, NavLink, Route } from 'react-router-dom';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return  (\r\n          <BrowserRouter>\r\n              <Nav className=\"flex-column Navbar\">\r\n                <NavLink to=\"/\" exact ><li activeClassName = \"button_active\" className=\"nav-item\" >Home</li></NavLink>\r\n                <NavLink to=\"/profile\"><li activeClassName = \"button_active\" className=\"nav-item\" >Profile</li></NavLink>\r\n                <NavLink to=\"/settings\"><li activeClassName = \"button_active\" className=\"nav-item\" >Settings</li></NavLink>\r\n              </Nav>\r\n              <Route path=\"/\" exact component={Home}/>\r\n              <Route path=\"/profile\" exact component={Profile}/>\r\n              <Route path=\"/settings\" exact component={Settings}/>\r\n              {console.log(this.props.category_names)}\r\n          </BrowserRouter>\r\n    )\r\n  }\r\n}\r\n\r\n// const mapStateToProps = (state) => {\r\n//   return {\r\n//       category_names: state\r\n//   }\r\n// };\r\n\r\n// export default connect(mapStateToProps)(App);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const addCategory = ( state= [],  action) => {\r\n    switch(action.type) {\r\n        case 'ADD':\r\n            return state.concat([action.data])\r\n            //    ...state,\r\n            //    state : state.concat([action.data])\r\n            \r\n        case 'DELETE':\r\n            return state.filter((title)=>title.id !== action.id);\r\n            //   ...state,\r\n            //  state : state.filter((title)=>title.id !== action.id)\r\n            \r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport default addCategory;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from 'redux';\r\nimport addCategory from './reducers/addCategory';\r\nimport { Provider } from 'react-redux';\r\n\r\nconst store = createStore(addCategory);\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}